image: docker:latest
services:
- docker:dind

stages:
- test
- build
- production

before_script:
- apk update && apk upgrade
- apk add --update bash curl git gettext openssh python python-dev py-pip build-base openssl wget
- pip install docker-compose

- docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
- docker network create bicing-api-network

- ENVIRONMENT=$(echo $CI_BUILD_REF_NAME | awk -F'/' '{print $1}')
- PRODUCTION_TAG=$(echo $CI_BUILD_REF_NAME | awk -F'/' '{print $2}')
- export PRODUCTION_IMAGE="$CI_REGISTRY_IMAGE:$PRODUCTION_TAG"

test:
  environment: test
  script:
  - cp .env.dist .env
  - docker-compose up -d
  - docker-compose run --rm php composer install
  - docker-compose run --rm bin/phpstan analyse src --level max
  - docker-compose run --rm php bin/phpcs --standard=PSR2 src
  - docker-compose run --rm php bin/phpspec run
  - docker-compose run --rm php bin/console do:mi:mi -n --env=test
  - docker-compose run --rm php bin/simple-phpunit
  - docker-compose run --rm php bin/behat
  - docker-compose run --rm php rm -rf var/cache/* var/log/*
  - docker-compose down -v --remove-orphans
  stage: test
  only:
  - /^[F|f]eature\/.*$/

build:
  environment: build
  extends: test
  script:
  - docker build --target bicing_api_php -t $PRODUCTION_IMAGE .
  - docker push $PRODUCTION_IMAGE
  stage: build
  only:
  - /^[R|r]elease\/.*$/
  - /^[H|h]otfix\/.*$/

### Production Environment
production:
  environment: production
  stage: production
  script:
  - echo "Hello We will now be preparing the Build $ENVIRONMENT environment for you."

  - chmod +x ./docker/stages/production/deploy.sh
  - ./docker/stages/production/deploy.sh

  - echo "$ENVIRONMENT ENVIRONMENT HAS BEEN DEPLOY SUCCESSFULY!"
  when: manual
  only:
  - /^[R|r]elease\/.*$/
  - /^[H|h]otfix\/.*$/

